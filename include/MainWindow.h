#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <GLWindow.h>

#include <boost/shared_ptr.hpp>

#include <Engine.h>
#include <Scene.h>
#include <Settings.h>
#include <TissueShape.h>

namespace Ui {
    class MainWindow;
}

class MainWindow : public QMainWindow
{
Q_OBJECT
public:
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief ctor
	/// @param[in] parent the parent window
	//----------------------------------------------------------------------------------------------------------------------
	explicit MainWindow(QWidget *parent = 0);
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief dtor
	//----------------------------------------------------------------------------------------------------------------------
	~MainWindow();

private:
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief a pointer to our user interface
	//----------------------------------------------------------------------------------------------------------------------
	Ui::MainWindow *m_ui;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief our open gl window
	//----------------------------------------------------------------------------------------------------------------------
	GLWindow *m_gl;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief our render engine
	//----------------------------------------------------------------------------------------------------------------------
	boost::shared_ptr<Engine> m_pathtracer;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief our scene
	//----------------------------------------------------------------------------------------------------------------------
	boost::shared_ptr<Scene> m_scene;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief our render settings
	//----------------------------------------------------------------------------------------------------------------------
	boost::shared_ptr<Settings> m_settings;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief our cell structure
	//----------------------------------------------------------------------------------------------------------------------
	boost::shared_ptr<TissueShape> m_tissue;

private slots :
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the x resolution
	//----------------------------------------------------------------------------------------------------------------------
	inline void setResolutionX(int _input)
	{
		m_settings->resolution_x = _input;
		m_scene->getCamera()->ratio(static_cast<float>(m_settings->resolution_x) / static_cast<float>(m_settings->resolution_y));
	}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the y resolution
	//----------------------------------------------------------------------------------------------------------------------
	inline void setResolutionY(int _input)
	{
		m_settings->resolution_y = _input;
		m_scene->getCamera()->ratio(static_cast<float>(m_settings->resolution_x) / static_cast<float>(m_settings->resolution_y));
	}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the bucket size
	//----------------------------------------------------------------------------------------------------------------------
	inline void setBucketSize(int _input){m_settings->bucket_size = _input;}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the sample count
	//----------------------------------------------------------------------------------------------------------------------
	inline void setSamples(int _input){m_settings->samples = _input;}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the depth limit
	//----------------------------------------------------------------------------------------------------------------------
	inline void setDepth(int _input){m_settings->depth = _input;}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the depth limit
	//----------------------------------------------------------------------------------------------------------------------
	inline void setAbsorption(double _absorption){m_settings->absorption = _absorption;}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the spring constant
	//----------------------------------------------------------------------------------------------------------------------
	inline void setSpingFactor(double _input){m_tissue->springFactor(_input);}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the planar constant
	//----------------------------------------------------------------------------------------------------------------------
	inline void setPlanarFactor(double _input){m_tissue->planarFactor(_input);}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the bulge constant
	//----------------------------------------------------------------------------------------------------------------------
	inline void setBulgeFactor(double _input){m_tissue->bulgeFactor(_input);}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the rest length
	//----------------------------------------------------------------------------------------------------------------------
	inline void setLinkRestLength(double _input){m_tissue->linkRestLength(_input);}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the repulsion constant
	//----------------------------------------------------------------------------------------------------------------------
	inline void setRepulsionFactor(double _input){m_tissue->repulsionFactor(_input);}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to set the repulsion radius
	//----------------------------------------------------------------------------------------------------------------------
	inline void setRepulsionRadius(double _input){m_tissue->repulsionRadius(_input);}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief a slot to set the simulation dt value
	//----------------------------------------------------------------------------------------------------------------------
	inline void setDT(double _dt){m_tissue->timeStep(_dt);}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to toggle the sim on and off
	//----------------------------------------------------------------------------------------------------------------------
	void toggleSim(bool _s);
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief slot to start render
	//----------------------------------------------------------------------------------------------------------------------
	void render();

};

#endif // MAINWINDOW_H

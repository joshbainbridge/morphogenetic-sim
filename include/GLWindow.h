#ifndef __GL_WINDOW_H__
#define __GL_WINDOW_H__


#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Transformation.h>
#include <QtOpenGL>

#include <boost/shared_ptr.hpp>

#include <TissueShape.h>

//----------------------------------------------------------------------------------------------------------------------
/// @file GLWindow.h
/// @brief a basic Qt GL window class for ngl demos
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/10/10
/// Revision History :
/// Initial Version 10/10/10 (Binary day ;-0 )
/// @class GLWindow
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------
class GLWindow : public QGLWidget
{
Q_OBJECT
public :
	//----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor for GLWindow
	/// @param[in] _timer the time value for simulation updates
  /// @param [in] _parent the parent window to create the GL context in
	//----------------------------------------------------------------------------------------------------------------------
	GLWindow(const QGLFormat _format, int _timer,QWidget *_parent );
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief dtor
	//----------------------------------------------------------------------------------------------------------------------
	~GLWindow();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief set the tissue to use
	/// @param[in] _s the tissue
	//----------------------------------------------------------------------------------------------------------------------
	inline void setTissue(const boost::shared_ptr<TissueShape> _s){m_tissue = _s;}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief start the simulation timer
	//----------------------------------------------------------------------------------------------------------------------
	void startSimTimer();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief stop the simulation timer
	//----------------------------------------------------------------------------------------------------------------------
	void stopSimTimer();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief get the camera position
	//----------------------------------------------------------------------------------------------------------------------
	Vector3f getCameraPos() const;

public slots :
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief set the timer duration value
	/// @param[in] _v the timer value in ms
	//----------------------------------------------------------------------------------------------------------------------
	inline void setTimerDuration(int _v){m_timerValue=_v;}
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief reset the simulation
	//----------------------------------------------------------------------------------------------------------------------
	void reset();

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the x rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinXFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the y rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinYFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rotate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the global mouse transforms
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_mouseGlobalTX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Our Camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_cam;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief transformation stack for the gl transformations etc
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our transformation stack used for drawing
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Transformation m_transform;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our tissue pointer
  //----------------------------------------------------------------------------------------------------------------------
  boost::shared_ptr<TissueShape> m_tissue;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our tissue data
  //----------------------------------------------------------------------------------------------------------------------
  float m_tissue_data[8000];
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief current cell count in simulation
  //----------------------------------------------------------------------------------------------------------------------
  int m_cell_count;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the timer value in ms
  //----------------------------------------------------------------------------------------------------------------------
  int m_timerValue;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the timer
  //----------------------------------------------------------------------------------------------------------------------
  int m_timer;

protected:

	//----------------------------------------------------------------------------------------------------------------------
  /// @brief  The following methods must be implimented in the sub class
  /// this is called when the window is created
	//----------------------------------------------------------------------------------------------------------------------
  void initializeGL();
	//----------------------------------------------------------------------------------------------------------------------
  /// @brief this is called whenever the window is re-sized
  /// @param[in] _w the width of the resized window
  /// @param[in] _h the height of the resized window
	//----------------------------------------------------------------------------------------------------------------------
	void resizeGL(const int _w, const int _h);
	//----------------------------------------------------------------------------------------------------------------------
  /// @brief this is the main gl drawing routine which is called whenever the window needs to
  /// be re-drawn
	//----------------------------------------------------------------------------------------------------------------------
  void paintGL();

private :
	//----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mouseMoveEvent ( QMouseEvent * _event );
	//----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mousePressEvent ( QMouseEvent *_event );
	//----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is released
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mouseReleaseEvent (QMouseEvent *_event );
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief timer event trigered by startTimer
	//----------------------------------------------------------------------------------------------------------------------
	void timerEvent(QTimerEvent *_event	);
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief Load camera data to shader
	//----------------------------------------------------------------------------------------------------------------------
	void loadMatricesToShader();

};

#endif
